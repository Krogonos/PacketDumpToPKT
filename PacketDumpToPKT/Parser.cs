using System;
using System.IO;
using System.Linq;
using System.Text;

namespace PacketDumpToPKT
{
    class Parser
    {
        public const UInt32 BUILD_NUMBER = 16357; // PUT THE CORRECT BUILD NUMBER HERE!  16357 = MoP 5.1.0a
        public const string CLIENT_LANGUAGE = "enUS";
        public const byte SNIFFER_ID = 0xFF; // ?

        private static byte[] StringToByteArray(string hex)
        {
            return Enumerable.Range(0, hex.Length)
                             .Where(x => x % 2 == 0)
                             .Select(x => Convert.ToByte(hex.Substring(x, 2), 16))
                             .ToArray();
        }

        private static UInt32 GetUnixTimeFromFileCreationTime(string filePath)
        {
            DateTime dateTime = File.GetCreationTime(filePath);
            DateTime unixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, 0);
            return (UInt32)(dateTime - unixEpoch).TotalSeconds;
        }

        private static Int32 GetTickCountFromFileName(string fileName)
        {
            var sTickCount = fileName.Remove(0, 11); // PacketDump.
            return Convert.ToInt32(sTickCount);
        }

        /// <summary>
        /// Creates a new file and write header data
        /// </summary>
        /// <param name="filePath">Path of the file parsed</param>
        /// <returns></returns>
        private static bool WriteHeaderData(string filePath)
        {
            string fileName = Path.GetFileName(filePath);
            string newFileName = fileName + ".pkt";
            MemoryStream stream = new MemoryStream();
            using (BinaryWriter binWriter = new BinaryWriter(stream))
            {
                binWriter.Write(Encoding.UTF8.GetBytes("PKT"));
                binWriter.Write((UInt16)0x301); // Format version PKT 3.1. First minor then major version bytes
                binWriter.Write(SNIFFER_ID);
                binWriter.Write(BUILD_NUMBER);
                binWriter.Write(Encoding.UTF8.GetBytes(CLIENT_LANGUAGE));
                binWriter.Write(new byte[40]); // Session Key
                binWriter.Write(GetUnixTimeFromFileCreationTime(filePath)); // Unix time, new byte[4] if you don't want to use this time
                binWriter.Write(GetTickCountFromFileName(fileName)); // Tick Count, new byte[4] if you don't want to use this time
                string optionalData = @"    This file is generated by PacketDumpToPKT <http://github.com/elecyb>    ";
                binWriter.Write(optionalData.Length); // Optional data length
                binWriter.Write(Encoding.UTF8.GetBytes(optionalData));
            }

            byte[] bytes = stream.ToArray();

            if (File.Exists(Path.Combine(Directory.GetCurrentDirectory(), newFileName)))
            {
                Console.WriteLine("File {0} already exists!, {1} not parsed", newFileName, fileName);
                return false;
            }
            try
            {
                FileStream fileStream = new FileStream(newFileName, FileMode.Create, FileAccess.Write);
                fileStream.Write(bytes, 0, bytes.Length);
                fileStream.Close();
                return true;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error creating file: {0}  Error: {1}", newFileName, e);
            }
            return false;
        }



        /// <summary>
        /// Parses a Strawberry's packet dump file.
        /// </summary>
        /// <param name="filePath">Path to the file to be parsed</param>
        public static void ParseFile(string filePath)
        {
            if (!WriteHeaderData(filePath))
                return;

            string newFileName = Path.GetFileName(filePath) + ".pkt";
            int packetCount = 0;
            string line;

            try
            {
                // Read each line of the file
                using (StreamReader file = new StreamReader(filePath))
                {
                    while ((line = file.ReadLine()) != null)
                    {
                        string[] splitString = line.Split(';');
                        string[] data = new string[4];
                        // Time: 136179044;OpcodeType: CMSG;OpcodeValue: 3944;Packet: 0000;
                        data[0] = splitString[0].Remove(0, 6); // Time: 
                        data[1] = splitString[1].Remove(0, 12); // OpcodeType: 
                        data[2] = splitString[2].Remove(0, 13); // OpcodeValue: 
                        data[3] = splitString[3].Remove(0, 8); // Packet: 

                        MemoryStream stream = new MemoryStream();
                        using (BinaryWriter binWriter = new BinaryWriter(stream))
                        {
                            binWriter.Write(Encoding.UTF8.GetBytes(data[1])); // packet direction
                            binWriter.Write(new byte[4]); // connection ID
                            binWriter.Write(Convert.ToInt32(data[0])); // tick count
                            binWriter.Write(0x2); // optional data length, needed?
                            byte[] packetData = StringToByteArray(data[3]);
                            binWriter.Write(4 + packetData.Length); // data length. 4 for the opcode
                            binWriter.Write(new byte[2]); // optional data
                            binWriter.Write(Convert.ToInt32(data[2])); // opcode
                            binWriter.Write(packetData); // packet

                        }

                        byte[] bytes = stream.ToArray();

                        using (FileStream outputFile = new FileStream(filePath + ".pkt", FileMode.Append))
                        {
                            outputFile.Write(bytes, 0, bytes.Length);
                        }
                        packetCount++;
                    }
                }
                Console.WriteLine("Completed {0}  Number of packets: {1} \n", newFileName, packetCount);
            }
            catch (Exception e)
            {
                Console.WriteLine("Error while opening file. Error: {0}", e);
            }

        }
    }
}
